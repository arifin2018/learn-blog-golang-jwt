definitions:
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    required:
    - content
    type: object
  models.GetComment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      user:
        $ref: '#/definitions/models.PostUser'
    type: object
  models.GetPost:
    properties:
      comment:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      image:
        items:
          $ref: '#/definitions/models.Image'
        type: array
      tag:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      user:
        $ref: '#/definitions/models.PostUser'
    required:
    - content
    - title
    type: object
  models.Image:
    properties:
      id:
        type: integer
      image_url:
        type: string
    required:
    - image_url
    type: object
  models.LoginRes:
    properties:
      message:
        type: string
      user:
        items:
          $ref: '#/definitions/models.UserToken'
        type: array
    type: object
  models.LoginUsers:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Post:
    properties:
      comment:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      comment_id:
        items:
          type: integer
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      image:
        items:
          $ref: '#/definitions/models.Image'
        type: array
      image_id:
        items:
          type: integer
        type: array
      image_url:
        items:
          type: string
        type: array
      tag:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      tag_id:
        items:
          type: integer
        type: array
      title:
        type: string
      user:
        $ref: '#/definitions/models.PostUser'
      user_id:
        type: integer
    required:
    - content
    - title
    type: object
  models.PostReq:
    properties:
      content:
        type: string
      image_url:
        items:
          type: string
        type: array
      tag_id:
        items:
          type: integer
        type: array
      title:
        type: string
    required:
    - content
    - title
    type: object
  models.PostUser:
    properties:
      email:
        type: string
      id:
        type: integer
      nickname:
        type: string
    type: object
  models.RegisterUsers:
    properties:
      email:
        type: string
      imageUrl:
        type: string
      nickname:
        type: string
      password:
        type: string
    required:
    - imageUrl
    - nickname
    - password
    type: object
  models.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  models.TagPost:
    properties:
      id:
        type: integer
      name:
        type: string
      post:
        items:
          $ref: '#/definitions/models.GetPost'
        type: array
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      imageUrl:
        type: string
      nickname:
        type: string
      password:
        type: string
    required:
    - imageUrl
    - nickname
    - password
    type: object
  models.UserToken:
    properties:
      email:
        type: string
      nickname:
        type: string
      token:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /Tags:
    put:
      description: Delete a Tags.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Delete a Tags.
      tags:
      - Tags
  /comments/:id:
    delete:
      description: Delete a Comments.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Delete a Comments.
      tags:
      - Comments
    get:
      description: Get a list of GetComments.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetComment'
            type: array
      summary: Get all GetComments.
      tags:
      - Comments
    post:
      description: Creating a new Comments.
      parameters:
      - description: the body to create a new Comment
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Create New Comments.
      tags:
      - Comments
  /login:
    post:
      description: Login for user.
      parameters:
      - description: the body to Login user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.LoginUsers'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginRes'
      summary: Login user.
      tags:
      - Users
  /posts:
    get:
      description: Get a list of GetPosts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetPost'
            type: array
      summary: Get all GetPosts.
      tags:
      - Posts
    post:
      description: Creating a new Posts.
      parameters:
      - description: the body to create a new Posts
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.PostReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Create New Posts.
      tags:
      - Posts
  /posts/:id:
    delete:
      description: Delete a Post.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Delete a Post.
      tags:
      - Posts
  /register:
    post:
      description: Register for user.
      parameters:
      - description: the body to register user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUsers'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Register user.
      tags:
      - Users
  /tags:
    get:
      description: Get a list of GetTags.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TagPost'
            type: array
      summary: Get all GetTags.
      tags:
      - Tags
    post:
      description: Creating a new Tags.
      parameters:
      - description: the body to create a new Tags
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
      summary: Create New Tags.
      tags:
      - Tags
swagger: "2.0"
